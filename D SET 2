### Task 1:

#### (i) Create a table STUDENT
sql
CREATE TABLE STUDENT (
    RegNo INTEGER PRIMARY KEY,
    Name VARCHAR(size_of_Name),
    Gender VARCHAR(size_of_Gender),
    DOB DATE,
    MobileNo VARCHAR(size_of_MobileNo),
    City VARCHAR(size_of_City)
);



#### (ii) Create a table FACULTY
sql
CREATE TABLE FACULTY (
    FacNo INTEGER PRIMARY KEY,
    FacName VARCHAR(size_of_FacName),
    Gender VARCHAR(size_of_Gender),
    DOB DATE,
    DOJ DATE,
    MobileNo VARCHAR(size_of_MobileNo)
);


#### (iii) Create a table DEPARTMENT
sql
CREATE TABLE DEPARTMENT (
    DeptNo INTEGER PRIMARY KEY,
    DeptName VARCHAR(size_of_DeptName),
    DeptHead VARCHAR(size_of_DeptHead)
);


### Task 2:

#### (i) Retrieve Name, Gender, MobileNo of all students in ascending order of Reg No.
sql
SELECT Name, Gender, MobileNo FROM STUDENT ORDER BY RegNo ASC;


#### (ii) List the faculty members in the order of older faculty first.
sql
SELECT * FROM FACULTY ORDER BY DOB ASC;


#### (iii) How many students are registered for each course? Display the course description and the number of students registered in each course.
sql
-- Assuming there's a table COURSE with CourseCode and CourseDescription
SELECT c.CourseDescription, COUNT(s.RegNo) AS NumberOfStudents
FROM COURSE c
LEFT JOIN STUDENT s ON c.CourseCode = s.CourseCode
GROUP BY c.CourseCode, c.CourseDescription;


### Task 3:

#### (i) Rollback to that state using the ROLLBACK command whenever required.
sql
-- Perform operations, and in case of issues, use ROLLBACK to revert changes
ROLLBACK;


#### (ii) Create a following table Class and insert values into it in the order and create savepoints in between them.
sql
CREATE TABLE Class (
    ...
);

-- Insert values
INSERT INTO Class VALUES (...);

-- Create Savepoint
SAVEPOINT savepoint_name;

-- Insert more values
INSERT INTO Class VALUES (...);


#### (iii) Rollback to the savepoint and check your output by giving select commands.
sql
-- Rollback to Savepoint
ROLLBACK TO savepoint_name;

-- Check output with SELECT commands
SELECT * FROM Class;


### Task 4:

To connect MySQL using PHP and execute queries, you would typically use the MySQLi or PDO extension. Below is a simple example using MySQLi:

php
<?php
$servername = "your_server_name";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// CREATE TABLE query
$sql_create_table = "CREATE TABLE example_table (
    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    age INT(3) NOT NULL
)";

if ($conn->query($sql_create_table) === TRUE) {
    echo "Table created successfully";
} else {
    echo "Error creating table: " . $conn->error;
}

// INSERT query
$sql_insert = "INSERT INTO example_table (name, age) VALUES ('John Doe', 25)";

if ($conn->query($sql_insert) === TRUE) {
    echo "Record inserted successfully";
} else {
    echo "Error inserting record: " . $conn->error;
}

// SELECT query
$sql_select = "SELECT * FROM example_table";
$result = $conn->query($sql_select);

if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        echo "ID: " . $row["id"]. " - Name: " . $row["name"]. " - Age: " . $row["age"]. "<br>";
    }
} else {
    echo "0 results";
}

// Close connection
$conn->close();
?>


Remember to replace placeholders like your_server_name, your_username, your_password, and your_database_name with your actual database connection details.
