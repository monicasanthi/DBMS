### Task 1:

#### (i) Create and populate five tables with your own data for STUDENT DETAILS, FACULTY, EMPLOYEE, BANK, CUSTOMER

sql
-- Create and populate STUDENT_DETAILS table
CREATE TABLE STUDENT_DETAILS (
    RegNo INTEGER PRIMARY KEY,
    Name VARCHAR(size_of_Name),
    Gender VARCHAR(size_of_Gender),
    DOB DATE,
    MobileNo VARCHAR(size_of_MobileNo),
    City VARCHAR(size_of_City)
);

INSERT INTO STUDENT_DETAILS VALUES (1, 'John Doe', 'Male', '1990-01-01', '1234567890', 'City1');
-- Add more rows...

-- Similar creation and population for FACULTY, EMPLOYEE, BANK, CUSTOMER tables


#### (ii) Update the value of student name whose register number is '191711342'
sql
UPDATE STUDENT_DETAILS
SET Name = 'NewName'
WHERE RegNo = 191711342;


#### (iii) Delete the record in the table FACULTY, who resigned her job.
sql
DELETE FROM FACULTY
WHERE ResignationStatus = 'Resigned';


### Task 2:

#### (i) List the departments where the faculty members are working (Using INNER JOIN)
sql
SELECT DISTINCT D.DeptName
FROM DEPARTMENT D
INNER JOIN FACULTY F ON D.DeptNo = F.DeptNo;


#### (ii) Find the student who has no score in any of the courses. List student name and course number. (Using LEFT JOIN)
sql
SELECT S.Name, C.CourseNumber
FROM STUDENT S
LEFT JOIN SCORES SC ON S.RegNo = SC.RegNo
LEFT JOIN COURSE C ON SC.CourseCode = C.CourseCode
WHERE SC.CourseCode IS NULL;


#### (iii) The office clerk needs the names of the courses taken by the faculty belonging to "ECE department whose name is 'Kamal". (Using INNER JOIN)
sql
SELECT F.FacName, C.CourseName
FROM FACULTY F
INNER JOIN DEPARTMENT D ON F.DeptNo = D.DeptNo
INNER JOIN COURSE C ON D.DeptName = 'ECE' AND F.FacName = 'Kamal' AND C.DeptNo = D.DeptNo;


### Task 3:

#### (i) PROCEDURE to get all records from the table "student_info' with specific data
sql
CREATE PROCEDURE GetStudentInfoByData()
BEGIN
    SELECT *
    FROM student_info
    WHERE Department = 'Computer' AND Gender = 'Male';
END;


#### (ii) Create a stored procedure GetCustomerLevel
sql
CREATE PROCEDURE GetCustomerLevel(IN p_customer_number INT, OUT p_customer_level VARCHAR(10))
BEGIN
    DECLARE credit_limit INT;
    
    -- Get credit limit from customers table
    SELECT CreditLimit INTO credit_limit
    FROM customers
    WHERE CustomerNumber = p_customer_number;
    
    -- Determine customer level
    IF credit_limit > 10000 THEN
        SET p_customer_level = 'PLATINUM';
    ELSEIF credit_limit > 5000 THEN
        SET p_customer_level = 'GOLD';
    ELSE
        SET p_customer_level = 'SILVER';
    END IF;
END;


### Task 4:

Creating an ER diagram and related SQL queries for HRM database would require specific information about the entities, relationships, and attributes in your HRM scenario. Without that detailed information, I can provide a general outline:

#### General ER Diagram Structure:

- Entities: Employee, Department, Position, Salary, Training, etc.
- Relationships: Employee works in a Department, Employee holds a Position, Employee receives Salary, Employee undergoes Training, etc.
- Attributes: EmployeeID, DepartmentID, PositionID, SalaryAmount, TrainingType, etc.

#### Sample SQL Query:

sql
-- Example query to get employees and their department
SELECT Employee.EmployeeID, Employee.Name, Department.DepartmentName
FROM Employee
JOIN Department ON Employee.DepartmentID = Department.DepartmentID;


For a more accurate ER diagram and related SQL queries, I would need detailed information about your HRM scenario.
