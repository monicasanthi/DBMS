### Task 1:

#### (i) Who are the boy students registered for the course with the course number "C001".
sql
SELECT StudentName
FROM COURSE
WHERE Gender = 'Boy' AND CourseName = 'C001';


#### (ii) Display all faculty details joined before "November 2014".
sql
SELECT *
FROM COURSE
WHERE `Faculty joined date` < '2014-11-01';


#### (iii) Display all the courses not allotted to halls.
sql
SELECT *
FROM COURSE
WHERE `Hall name` IS NULL AND `Hall no` IS NULL;


### Task 2:

#### (i) Create a view with the name 'std_view' using the STUDENT table.
sql
CREATE VIEW std_view AS
SELECT RegNo, Name, DOB
FROM STUDENT;


#### (ii) Create a sequence named "sequence1".
sql
CREATE SEQUENCE sequence1
START WITH 1
INCREMENT BY 1
MAXVALUE 100
CYCLE;


#### (iii) Create an index named "idx_lastname" on the "LastName" column in the "Persons" table.
sql
CREATE INDEX idx_lastname
ON Persons(LastName);


### Task 3:

#### (i) Create a function that returns the level of a customer based on the credit limit.
sql
DELIMITER //

CREATE FUNCTION GetCustomerLevel(credit_limit INT) RETURNS VARCHAR(10)
BEGIN
    DECLARE customer_level VARCHAR(10);

    IF credit_limit >= 50000 THEN
        SET customer_level = 'PLATINUM';
    ELSEIF credit_limit >= 10000 THEN
        SET customer_level = 'GOLD';
    ELSE
        SET customer_level = 'SILVER';
    END IF;

    RETURN customer_level;
END //

DELIMITER ;


#### (ii) Write a recursive MySQL procedure to compute the factorial of a number.
sql
DELIMITER //

CREATE PROCEDURE ComputeFactorial(IN num INT, OUT result INT)
BEGIN
    IF num = 0 OR num = 1 THEN
        SET result = 1;
    ELSE
        CALL ComputeFactorial(num - 1, @temp);
        SET result = num * @temp;
    END IF;
END //

DELIMITER ;


### Task 4:

Creating an ER diagram and related SQL queries for a Book Publishing Company would depend on specific details about the entities, relationships, and attributes in your scenario. Here's a generic outline:

#### General ER Diagram Structure:

- Entities: Author, Book, Publisher, Genre, Review, etc.
- Relationships: Author writes Book, Book belongs to Genre, Book is published by Publisher, etc.
- Attributes: AuthorID, BookID, PublisherID, GenreID, ReviewID, etc.

#### Sample SQL Query:

sql
-- Example query to get authors and their books
SELECT Author.AuthorName, Book.BookTitle
FROM Author
JOIN Book ON Author.AuthorID = Book.AuthorID;


For a more accurate ER diagram and related SQL queries, I would need detailed information about your Book Publishing Company scenario.
