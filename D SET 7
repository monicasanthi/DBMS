### Task 1:

#### (i) Find the average mark of "C002".
sql
SELECT AVG(Marks) AS AverageMark
FROM STUDENT
WHERE Coursename = 'C002';


#### (ii) List the maximum, minimum mark for "C021".
sql
SELECT MAX(Marks) AS MaximumMark, MIN(Marks) AS MinimumMark
FROM STUDENT
WHERE Coursename = 'C021';


#### (iii) Calculate the sum of all the scores.
sql
SELECT SUM(Marks) AS TotalScore
FROM STUDENT;


### Task 2:

#### (i) Write a function using CASE statement to set income level.
sql
DELIMITER //

CREATE FUNCTION GetIncomeLevel(monthly_value INT)
RETURNS VARCHAR(20)
BEGIN
    DECLARE income_level VARCHAR(20);

    CASE
        WHEN monthly_value <= 4000 THEN SET income_level = 'Low Income';
        WHEN monthly_value <= 5000 THEN SET income_level = 'Avg Income';
        ELSE SET income_level = 'High Income';
    END CASE;

    RETURN income_level;
END //

DELIMITER ;

-- Example usage:
SELECT GetIncomeLevel(3500) AS IncomeLevel;


#### (ii) Write a function using ITERATE statement to repeat the loop until income is greater than or equal to 4000.
sql
DELIMITER //

CREATE FUNCTION RepeatUntilIncome(income INT)
RETURNS INT
BEGIN
    income_loop: LOOP
        IF income >= 4000 THEN
            LEAVE income_loop;
        END IF;

        -- Process the income as needed
        SET income = income + 1000;
    END LOOP;

    RETURN income;
END //

DELIMITER ;

-- Example usage:
SELECT RepeatUntilIncome(3000) AS FinalIncome;


### Task 3:

sql
-- Assuming you want to log changes for the EMPLOYEES table, and it has fields ID, Name, and Email.

-- Create the EMPLOYEES table
CREATE TABLE EMPLOYEES (
    ID INT PRIMARY KEY,
    Name VARCHAR(50),
    Email VARCHAR(50)
);

-- Create the EMPLOYEES AUDIT table to keep track of changes
CREATE TABLE EMPLOYEES_AUDIT (
    AuditID INT AUTO_INCREMENT PRIMARY KEY,
    ID INT,
    Name VARCHAR(50),
    Email VARCHAR(50),
    Action VARCHAR(10),
    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ID) REFERENCES EMPLOYEES(ID)
);

-- Create the BEFORE UPDATE trigger
DELIMITER //

CREATE TRIGGER BeforeUpdateEmployees
BEFORE UPDATE ON EMPLOYEES
FOR EACH ROW
BEGIN
    IF OLD.Name <> NEW.Name THEN
        INSERT INTO EMPLOYEES_AUDIT (ID, Name, Email, Action)
        VALUES (OLD.ID, OLD.Name, OLD.Email, 'Update (Name)');
    END IF;

    IF OLD.Email <> NEW.Email THEN
        INSERT INTO EMPLOYEES_AUDIT (ID, Name, Email, Action)
        VALUES (OLD.ID, OLD.Name, OLD.Email, 'Update (Email)');
    END IF;
END //

DELIMITER ;

-- Example usage:
-- Assuming you have an employee with ID=1, Name='John Doe', Email='john@example.com'
UPDATE EMPLOYEES SET Name = 'Jane Smith' WHERE ID = 1;


### Task 4:

#### 1. Rename the table DEPT as department.
sql
ALTER TABLE DEPT RENAME TO department;


#### 2. Add a new column PINCODE with not null constraints to the existing table DEPT.
sql
ALTER TABLE department ADD COLUMN PINCODE INT NOT NULL;


#### 3. All constraints and views that reference the column are dropped automatically, along with the column.
sql
-- This operation is not explicitly executed since constraints and views are automatically dropped when modifying the column.
-- Drop constraints and views manually if needed.


#### 4. Rename the column DNAME to DEPT NAME in the department table.
sql
ALTER TABLE department CHANGE COLUMN DName `DEPT NAME` VARCHAR(50);


#### 5. Change the data type of column loc as CHAR with size 10.
sql
ALTER TABLE department MODIFY COLUMN Location CHAR(10);


#### 6. Delete the table.
sql
DROP TABLE department;
