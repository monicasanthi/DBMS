### Task 1:

#### (i) Find the ids of sailors who have reserved a red boat or a green boat.
sql
SELECT DISTINCT S.sid
FROM SAILORS S
JOIN RESERVES R ON S.sid = R.sid
JOIN BOATS B ON R.bid = B.bid
WHERE B.color IN ('red', 'green');


#### (ii) Find the name and the age of the youngest sailor.
sql
SELECT sname, age
FROM SAILORS
WHERE age = (SELECT MIN(age) FROM SAILORS);


### Task 2:

#### (i) Count the number of different sailor names.
sql
SELECT COUNT(DISTINCT sname) AS NumOfSailorNames
FROM SAILORS;


#### (ii) Find the average age of sailors for each rating level.
sql
SELECT rating, AVG(age) AS AvgAge
FROM SAILORS
GROUP BY rating;


#### (iii) Find the average age of sailors for each rating level that has at least two sailors.
sql
SELECT rating, AVG(age) AS AvgAge
FROM SAILORS
GROUP BY rating
HAVING COUNT(sid) >= 2;


### Task 3:

#### (i) Insert records into the CUSTOMER table.
sql
INSERT INTO CUSTOMER (Cust_name, Cust_street, Cust_city)
VALUES
('John Doe', '123 Main St', 'City1'),
('Jane Smith', '456 Oak St', 'City2'),
('Bob Johnson', '789 Pine St', 'City3');


#### (ii) Add a salary column to the table.
sql
ALTER TABLE CUSTOMER ADD COLUMN salary INTEGER;


#### (iii) Alter the table column domain.
sql
ALTER TABLE CUSTOMER MODIFY COLUMN Cust_name VARCHAR(50);
ALTER TABLE CUSTOMER MODIFY COLUMN Cust_street VARCHAR(50);
ALTER TABLE CUSTOMER MODIFY COLUMN Cust_city VARCHAR(50);


#### (iv) Drop the salary column of the CUSTOMER table.
sql
ALTER TABLE CUSTOMER DROP COLUMN salary;


### Task 4:

sql
-- Assuming you want to retrieve email-ids, you should have an 'Email' column in the EMPLOYEE table.

-- Create a sample table
CREATE TABLE EMPLOYEE (
    EmpNo INT,
    Name VARCHAR(50),
    BankName VARCHAR(50),
    Address VARCHAR(50),
    BankLocation VARCHAR(50),
    BranchName VARCHAR(50),
    Email VARCHAR(50)
);

-- Sample data
INSERT INTO EMPLOYEE VALUES
(1, 'John Doe', 'ABC Bank', '123 Main St', 'City1', 'Branch1', 'john@example.com'),
(2, 'Jane Smith', 'XYZ Bank', '456 Oak St', 'City2', 'Branch2', 'jane@example.com');

-- Cursor program to retrieve email-ids
DELIMITER //

CREATE PROCEDURE GetEmailIds()
BEGIN
    DECLARE done BOOLEAN DEFAULT FALSE;
    DECLARE email_id VARCHAR(50);

    -- Declare cursor
    DECLARE email_cursor CURSOR FOR SELECT Email FROM EMPLOYEE;

    -- Declare handler for not found
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Open the cursor
    OPEN email_cursor;

    -- Fetch and print email-ids
    email_loop: LOOP
        FETCH email_cursor INTO email_id;
        IF done THEN
            LEAVE email_loop;
        END IF;

        -- Process the email_id as needed (print, store, etc.)
        SELECT email_id;
    END LOOP;

    -- Close the cursor
    CLOSE email_cursor;
END //

DELIMITER ;

-- Call the procedure to execute the cursor
CALL GetEmailIds();


Replace the table structure and data with your actual EMPLOYEE table structure and data.
